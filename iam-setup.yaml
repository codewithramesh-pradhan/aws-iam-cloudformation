AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Enhanced IAM setup with refined permissions, password policy, and CloudTrail

Resources:
  # Password Policy
  PasswordPolicy:
    Type: AWS::IAM::AccountPasswordPolicy
    Properties:
      MinimumPasswordLength: 14
      RequireUppercaseCharacters: true
      RequireLowercaseCharacters: true
      RequireNumbers: true
      RequireSymbols: true
      MaxPasswordAge: 90
      PasswordReusePrevention: 12
      AllowUsersToChangePassword: true

  # CloudTrail for Audit
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-cloudtrail-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub "${AWS::StackName}-audit-trail"
      S3BucketName: !Ref CloudTrailBucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true

  # IAM Groups
  DevelopersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "Developers"

  OperationsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "Operations"

  FinanceGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "Finance"

  AnalystsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "Analysts"

  # IMPROVED: Refined Operations Policy (No more full access)
  OperationsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "OperationsAccess"
      Groups: [ !Ref OperationsGroup ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
              - "rds:*"
              - "cloudformation:*"
              - "cloudwatch:*"
              - "logs:*"
              - "s3:*"
              - "iam:ListRoles"
              - "iam:PassRole"
              - "iam:GetRole"
            Resource: "*"

  # Existing policies (unchanged)
  DeveloperPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "DeveloperAccess"
      Groups: [ !Ref DevelopersGroup ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
              - "s3:*"
            Resource: "*"

  FinancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "FinanceAccess"
      Groups: [ !Ref FinanceGroup ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "aws-portal:*"
              - "ce:*"
            Resource: "*"

  AnalystPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "AnalystAccess"
      Groups: [ !Ref AnalystsGroup ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "ec2:Describe*"
              - "rds:Describe*"
              - "cloudwatch:Get*"
              - "cloudwatch:List*"
              - "cloudwatch:Describe*"
            Resource: "*"

  # Users (unchanged)
  DevUser1:
    Type: AWS::IAM::User
    Properties:
      UserName: dev1
      Groups: [ !Ref DevelopersGroup ]
      Tags:
        - Key: Department
          Value: Development
        - Key: CostCenter
          Value: Engineering

  DevUser2:
    Type: AWS::IAM::User
    Properties:
      UserName: dev2
      Groups: [ !Ref DevelopersGroup ]

  DevUser3:
    Type: AWS::IAM::User
    Properties:
      UserName: dev3
      Groups: [ !Ref DevelopersGroup ]

  DevUser4:
    Type: AWS::IAM::User
    Properties:
      UserName: dev4
      Groups: [ !Ref DevelopersGroup ]

  OpsUser1:
    Type: AWS::IAM::User
    Properties:
      UserName: ops1
      Groups: [ !Ref OperationsGroup ]
      Tags:
        - Key: Department
          Value: Operations
        - Key: CostCenter
          Value: Infrastructure

  OpsUser2:
    Type: AWS::IAM::User
    Properties:
      UserName: ops2
      Groups: [ !Ref OperationsGroup ]

  FinanceUser1:
    Type: AWS::IAM::User
    Properties:
      UserName: finance1
      Groups: [ !Ref FinanceGroup ]
      Tags:
        - Key: Department
          Value: Finance
        - Key: CostCenter
          Value: Finance

  AnalystUser1:
    Type: AWS::IAM::User
    Properties:
      UserName: analyst1
      Groups: [ !Ref AnalystsGroup ]

  AnalystUser2:
    Type: AWS::IAM::User
    Properties:
      UserName: analyst2
      Groups: [ !Ref AnalystsGroup ]

  AnalystUser3:
    Type: AWS::IAM::User
    Properties:
      UserName: analyst3
      Groups: [ !Ref AnalystsGroup ]

  # MFA Enforcement (unchanged but improved)
  EnforceMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: EnforceUseOfMFA
      Description: "Require MFA for all IAM actions except MFA device management"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "DenyAllExceptMFA"
            Effect: Deny
            NotAction:
              - "iam:CreateVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetUser"
              - "iam:ListMFADevices"
              - "iam:ListVirtualMFADevices"
              - "iam:ResyncMFADevice"
              - "sts:GetSessionToken"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"

  # MFA Group Policies (unchanged)
  AttachMFADevelopers:
    Type: AWS::IAM::GroupPolicy
    Properties:
      GroupName: !Ref DevelopersGroup
      PolicyName: EnforceUseOfMFA
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            NotAction:
              - "iam:CreateVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetUser"
              - "iam:ListMFADevices"
              - "iam:ListVirtualMFADevices"
              - "iam:ResyncMFADevice"
              - "sts:GetSessionToken"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"

  AttachMFAOperations:
    Type: AWS::IAM::GroupPolicy
    Properties:
      GroupName: !Ref OperationsGroup
      PolicyName: EnforceUseOfMFA
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            NotAction:
              - "iam:CreateVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetUser"
              - "iam:ListMFADevices"
              - "iam:ListVirtualMFADevices"
              - "iam:ResyncMFADevice"
              - "sts:GetSessionToken"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"

  AttachMFAFinance:
    Type: AWS::IAM::GroupPolicy
    Properties:
      GroupName: !Ref FinanceGroup
      PolicyName: EnforceUseOfMFA
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            NotAction:
              - "iam:CreateVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetUser"
              - "iam:ListMFADevices"
              - "iam:ListVirtualMFADevices"
              - "iam:ResyncMFADevice"
              - "sts:GetSessionToken"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"

  AttachMFAAnalysts:
    Type: AWS::IAM::GroupPolicy
    Properties:
      GroupName: !Ref AnalystsGroup
      PolicyName: EnforceUseOfMFA
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            NotAction:
              - "iam:CreateVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:GetUser"
              - "iam:ListMFADevices"
              - "iam:ListVirtualMFADevices"
              - "iam:ResyncMFADevice"
              - "sts:GetSessionToken"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"

Outputs:
  CloudTrailArn:
    Description: "CloudTrail ARN for audit logging"
    Value: !GetAtt CloudTrail.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrail-Arn"

  S3BucketName:
    Description: "S3 bucket for CloudTrail logs"
    Value: !Ref CloudTrailBucket
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrail-Bucket"
